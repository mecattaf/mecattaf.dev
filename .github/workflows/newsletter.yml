name: Newsletter Automation

on:
  push:
    branches: [ main ]
    paths: [ 'content/blog/**' ]

jobs:
  newsletter:
    runs-on: ubuntu-latest
    
    # Only run if commit message contains [Newsletter] or [Draft]
    if: contains(github.event.head_commit.message, '[Newsletter]') || contains(github.event.head_commit.message, '[Draft]')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to detect changes
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install axios gray-matter
    
    - name: Process blog post and send newsletter
      env:
        CONVERTKIT_API_KEY: ${{ secrets.CONVERTKIT_API_KEY }}
        CONVERTKIT_API_SECRET: ${{ secrets.CONVERTKIT_API_SECRET }}
      run: |
        cat > newsletter-processor.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const axios = require('axios');
        const matter = require('gray-matter');

        async function main() {
          try {
            console.log('üöÄ Starting newsletter automation...');
            
            // Check commit message for action type
            const commitMessage = process.env.GITHUB_EVENT_HEAD_COMMIT_MESSAGE || '';
            const isDraft = commitMessage.includes('[Draft]');
            const isNewsletter = commitMessage.includes('[Newsletter]');
            
            if (!isDraft && !isNewsletter) {
              console.log('‚ùå No newsletter trigger found in commit message');
              return;
            }
            
            console.log(`üìù Mode: ${isDraft ? 'Draft' : 'Send Newsletter'}`);
            
            // Find the most recently modified blog post (excluding files starting with _)
            const blogDir = 'content/blog';
            const blogFiles = fs.readdirSync(blogDir)
              .filter(file => file.endsWith('.md') && !file.startsWith('_'))
              .map(file => {
                const filePath = path.join(blogDir, file);
                const stats = fs.statSync(filePath);
                return { file, path: filePath, mtime: stats.mtime };
              })
              .sort((a, b) => b.mtime - a.mtime);
            
            if (blogFiles.length === 0) {
              console.log('‚ùå No blog posts found');
              return;
            }
            
            const latestPost = blogFiles[0];
            console.log(`üìÑ Processing: ${latestPost.file}`);
            
            // Parse the blog post (Hugo uses TOML frontmatter with +++)
            const fileContent = fs.readFileSync(latestPost.path, 'utf8');
            
            let frontMatter = {};
            let content = fileContent;
            
            // Parse TOML frontmatter manually since gray-matter expects YAML by default
            const frontMatterMatch = fileContent.match(/^\+\+\+\n([\s\S]*?)\n\+\+\+\n([\s\S]*)$/);
            if (frontMatterMatch) {
              const frontMatterText = frontMatterMatch[1];
              content = frontMatterMatch[2];
              
              // Enhanced TOML parser for the fields we need
              frontMatterText.split('\n').forEach(line => {
                // Handle quoted strings
                const quotedMatch = line.match(/^(\w+)\s*=\s*"([^"]*)"$/);
                if (quotedMatch) {
                  frontMatter[quotedMatch[1]] = quotedMatch[2];
                  return;
                }
                
                // Handle unquoted strings/numbers
                const unquotedMatch = line.match(/^(\w+)\s*=\s*(.+)$/);
                if (unquotedMatch) {
                  frontMatter[unquotedMatch[1]] = unquotedMatch[2].trim();
                }
              });
            }
            
            // Convert markdown to HTML for email
            const emailContent = convertMarkdownToHTML(content, frontMatter.title || 'New Blog Post', frontMatter.slug, frontMatter.date);
            
            // Prepare newsletter data
            const subject = frontMatter.title || 'New Blog Post';
            
            console.log(`üìß Subject: ${subject}`);
            console.log(`üìù Content length: ${emailContent.length} characters`);
            
            // Send to ConvertKit
            await sendToConvertKit(subject, emailContent, isDraft);
            
          } catch (error) {
            console.error('‚ùå Error:', error.message);
            process.exit(1);
          }
        }

        function convertMarkdownToHTML(markdown, title, slug, date) {
          // Generate the blog post URL based on Hugo's permalink structure
          let blogUrl = 'https://mecattaf.dev/blog/';
          
          if (date && slug) {
            // Extract year from date (format: "2025-06-01T00:00:00+02:00")
            const year = date.split('-')[0];
            blogUrl += `${year}/${slug}/`;
          }
          
          // ConvertKit expects clean HTML that integrates with their template's CSS classes
          // No wrapper div needed - ConvertKit's template handles width constraints
          let html = '';
          
          // Add the title as H1 - ConvertKit's template will style it properly
          html += `<h1><a href="${blogUrl}" target="_blank" rel="noopener">${title}</a></h1>\n\n`;
          
          // Process the markdown content - semantic HTML that ConvertKit's CSS will style
          let content = markdown
            // Remove Hugo comments
            .replace(/<!--[\s\S]*?-->/g, '')
            // Remove Hugo shortcodes
            .replace(/\{\{[^}]+\}\}/g, '')
            // Convert headers - use semantic tags without any styling
            .replace(/^#{1}\s+(.+)$/gm, '<h2>$1</h2>')
            .replace(/^#{2}\s+(.+)$/gm, '<h3>$1</h3>')
            .replace(/^#{3}\s+(.+)$/gm, '<h4>$1</h4>')
            .replace(/^#{4}\s+(.+)$/gm, '<h5>$1</h5>')
            .replace(/^#{5,6}\s+(.+)$/gm, '<h6>$1</h6>')
            // Convert code blocks - minimal styling that doesn't conflict with ConvertKit
            .replace(/```([\w]*)\n([\s\S]*?)```/g, function(match, lang, code) {
              // Use ConvertKit-friendly styling
              return '<pre><code>' + escapeHtml(code.trim()) + '</code></pre>';
            })
            // Convert inline code
            .replace(/`([^`]+)`/g, '<code>$1</code>')
            // Convert images BEFORE links to avoid conflicts
            .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, function(match, alt, src) {
              // Convert relative URLs to absolute URLs for email compatibility
              let absoluteSrc = src;
              
              // Handle Cloudflare Images URLs (already absolute)
              if (src.includes('imagedelivery.net') || src.includes('cloudflare')) {
                absoluteSrc = src;
              }
              // If it's a relative path, make it absolute
              else if (src.startsWith('/')) {
                absoluteSrc = `https://mecattaf.dev${src}`;
              }
              // If it's already a full URL, keep it as is
              else if (!src.startsWith('http')) {
                // Handle other relative paths (without leading slash)
                absoluteSrc = `https://mecattaf.dev/${src}`;
              }
              
              // Let ConvertKit handle image styling
              return `<img src="${absoluteSrc}" alt="${alt}">`;
            })
            // Convert bold text 
            .replace(/\*\*([^*\n]+)\*\*/g, '<strong>$1</strong>')
            // Convert italic text 
            .replace(/\*([^*\n]+)\*/g, '<em>$1</em>')
            // Convert links
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, function(match, linkText, url) {
              // Ensure URLs are properly formatted for ConvertKit
              let cleanUrl = url.trim();
              
              // Add protocol if missing
              if (!cleanUrl.startsWith('http://') && !cleanUrl.startsWith('https://')) {
                if (cleanUrl.startsWith('www.')) {
                  cleanUrl = 'https://' + cleanUrl;
                } else if (cleanUrl.startsWith('/')) {
                  cleanUrl = 'https://mecattaf.dev' + cleanUrl;
                } else if (!cleanUrl.includes('://')) {
                  cleanUrl = 'https://' + cleanUrl;
                }
              }
              
              return `<a href="${cleanUrl}">${linkText}</a>`;
            });

          // Process lists separately
          const lines = content.split('\n');
          const processedLines = [];
          let inList = false;
          let listItems = [];

          for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const listMatch = line.match(/^(\s*)[-*+]\s+(.+)$/);
            
            if (listMatch) {
              const [, indent, itemContent] = listMatch;
              
              if (!inList) {
                inList = true;
                listItems = [];
              }
              
              listItems.push(`<li>${itemContent}</li>`);
            } else {
              if (inList) {
                // End of list
                processedLines.push(`<ul>${listItems.join('')}</ul>`);
                inList = false;
                listItems = [];
              }
              processedLines.push(line);
            }
          }

          // Don't forget the last list if the content ends with one
          if (inList) {
            processedLines.push(`<ul>${listItems.join('')}</ul>`);
          }

          // Join lines back and process paragraphs
          content = processedLines.join('\n');

          // Convert paragraphs - clean semantic HTML
          const sections = content.split(/\n\s*\n/);
          const processedSections = [];
          
          for (const section of sections) {
            const trimmedSection = section.trim();
            
            // Skip if empty
            if (!trimmedSection) {
              continue;
            }
            
            // Skip if it's already an HTML block element
            if (trimmedSection.match(/^<(h[1-6]|ul|ol|pre|blockquote|div|p|table|hr)/i)) {
              processedSections.push(trimmedSection);
              continue;
            }
            
            // Skip if it's a closing tag
            if (trimmedSection.match(/^<\//)) {
              continue;
            }
            
            // Wrap text content in paragraph tags
            processedSections.push(`<p>${trimmedSection}</p>`);
          }

          // Return clean HTML without any wrapper
          return html + processedSections.join('\n\n');
        }

        // Helper function to escape HTML in code blocks
        function escapeHtml(text) {
          const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
          };
          return text.replace(/[&<>"']/g, m => map[m]);
        }

        async function sendToConvertKit(subject, content, isDraft) {
          const apiKey = process.env.CONVERTKIT_API_KEY;
          const apiSecret = process.env.CONVERTKIT_API_SECRET;
          
          if (!apiKey || !apiSecret) {
            throw new Error('ConvertKit API credentials not found');
          }
          
          // Log the content for debugging
          console.log('üìù Email content preview (first 500 chars):');
          console.log(content.substring(0, 500));
          
          // Create broadcast with proper content type
          const broadcastData = {
            api_secret: apiSecret,
            subject: subject,
            content: content,
            content_type: 'html', // Explicitly specify HTML content type
            description: `Newsletter: ${subject}`,
            public: !isDraft  // If draft, don't make public yet
          };
          
          console.log('üì§ Creating broadcast in ConvertKit...');
          
          const response = await axios.post(
            `https://api.convertkit.com/v3/broadcasts?api_key=${apiKey}`,
            broadcastData,
            {
              headers: {
                'Content-Type': 'application/json'
              }
            }
          );
          
          const broadcastId = response.data.broadcast.id;
          console.log(`‚úÖ Broadcast created with ID: ${broadcastId}`);
          
          if (!isDraft) {
            // Send the broadcast immediately by updating it with send_at
            console.log('üì¨ Sending newsletter...');
            
            try {
              const sendResponse = await axios.put(
                `https://api.convertkit.com/v3/broadcasts/${broadcastId}`,
                { 
                  api_secret: apiSecret,
                  send_at: new Date().toISOString() // Send immediately
                },
                {
                  headers: {
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              console.log('üéâ Newsletter sent successfully!');
              console.log('üìä Send response:', JSON.stringify(sendResponse.data, null, 2));
            } catch (sendError) {
              console.error('‚ùå Error sending broadcast:');
              console.error('Status:', sendError.response?.status);
              console.error('Status Text:', sendError.response?.statusText);
              console.error('Response Data:', JSON.stringify(sendError.response?.data, null, 2));
              console.error('Request URL:', `https://api.convertkit.com/v3/broadcasts/${broadcastId}`);
              throw sendError;
            }
          } else {
            console.log('üìù Draft created in ConvertKit for review');
            console.log(`üîó Review at: https://app.convertkit.com/broadcasts/${broadcastId}`);
          }
        }

        // Add commit message to environment
        const { execSync } = require('child_process');
        try {
          const commitMsg = execSync('git log -1 --pretty=%B', { encoding: 'utf8' }).trim();
          process.env.GITHUB_EVENT_HEAD_COMMIT_MESSAGE = commitMsg;
        } catch (e) {
          console.log('Could not get commit message, using GitHub event');
        }

        main();
        EOF
        
        node newsletter-processor.js
    
    - name: Cleanup
      run: rm -f newsletter-processor.js
